{{ range $attributes := .Values.nodes }}
{{ if and $attributes.enabled (eq $attributes.type "relay") }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "cardano-node-{{ $attributes.name }}"
spec:
  replicas: 1
  selector:
    matchLabels:
      app: cardano-node
      name: {{ $attributes.name }}
      type: {{ $attributes.type }}
      network: {{ $.Values.network }}
  template:
    metadata:
      labels:
        app: cardano-node
        name: {{ $attributes.name }}
        type: {{ $attributes.type }}
        network: {{ $.Values.network }}
    spec:
      containers:
        - name: cardano-node
          image: "{{ $.Values.image.repository }}:{{ $.Values.image.tag }}"
          command: [ "cardano-node" ]
          args:
            - "run"
            - "--topology"
            - "/etc/config/{{ $.Values.network }}-topology.json"
            - "--database-path"
            - "/db"
            - "--socket-path"
            - "/db/node.socket"
            - "--host-addr"
            - "0.0.0.0"
            - "--port"
            - {{ $attributes.port | quote }}
            - "--config"
            - "/etc/config/{{ $.Values.network }}-config.json"
          ports:
            - name: node
              containerPort: {{ $attributes.port }}
            - name: prom
              containerPort: {{ $attributes.prometheusPort | default 12798 }}
          livenessProbe:
            httpGet:
              path: /metrics
              port: prom
            initialDelaySeconds: 120
            periodSeconds: 5
            timeoutSeconds: 10
          readinessProbe:
            httpGet:
              path: /metrics
              port: prom
            initialDelaySeconds: 30
            periodSeconds: 5
            timeoutSeconds: 10
          volumeMounts:
            - name: config-files
              mountPath: /etc/config
            - name: db
              mountPath: /db
      volumes:
        - name: config-files
          configMap:
            name: node-configuration-{{ $attributes.name }}
        - name: db
          persistentVolumeClaim:
            claimName: cardano-node-{{ $attributes.name }}
  strategy:
    type: Recreate
{{ else if and $attributes.enabled (eq $attributes.type "block-producer") }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "cardano-node-{{ $attributes.name }}"
spec:
  replicas: 1
  selector:
    matchLabels:
      app: cardano-node
      name: {{ $attributes.name }}
      type: {{ $attributes.type }}
      network: {{ $.Values.network }}
  template:
    metadata:
      labels:
        app: cardano-node
        name: {{ $attributes.name }}
        type: {{ $attributes.type }}
        network: {{ $.Values.network }}
    spec:
      containers:
        - name: cardano-node
          image: "{{ $.Values.image.repository }}:{{ $.Values.image.tag }}"
          command: [ "cardano-node" ]
          args:
            - "run"
            - "--topology"
            - "/etc/config/{{ $.Values.network }}-topology.json"
            - "--database-path"
            - "/db"
            - "--socket-path"
            - "/db/node.socket"
            - "--host-addr"
            - "0.0.0.0"
            - "--port"
            - {{ $attributes.port | quote }}
            - "--config"
            - "/etc/config/{{ $.Values.network }}-config.json"
            - "--shelley-kes-key"
            - "/etc/keys/kes.skey"
            - "--shelley-vrf-key"
            - "/etc/keys/vrf.skey"
            - "--shelley-operational-certificate"
            - "/etc/keys/node.cert"
          ports:
            - name: node
              containerPort: {{ $attributes.port }}
            - name: prom
              containerPort: {{ $attributes.prometheusPort | default 12798 }}
          livenessProbe:
            httpGet:
              path: /metrics
              port: prom
            initialDelaySeconds: 120
            periodSeconds: 5
            timeoutSeconds: 10
          readinessProbe:
            httpGet:
              path: /metrics
              port: prom
            initialDelaySeconds: 30
            periodSeconds: 5
            timeoutSeconds: 10
          volumeMounts:
            - name: config-files
              mountPath: /etc/config
            - name: secret-keys
              mountPath: /etc/keys
            - name: db
              mountPath: /db
      volumes:
        - name: config-files
          configMap:
            name: node-configuration-{{ $attributes.name }}
        - name: secret-keys
          secret:
            secretName: node-secret-keys-{{ $attributes.name }}
        - name: db
          persistentVolumeClaim:
            claimName: cardano-node-{{ $attributes.name }}
  strategy:
    type: Recreate
{{ end }}
{{ end }}